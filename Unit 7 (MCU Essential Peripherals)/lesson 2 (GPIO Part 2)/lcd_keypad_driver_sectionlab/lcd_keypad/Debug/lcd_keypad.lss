
lcd_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000384  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000684  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000305  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000618  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b4  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f1  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  7a:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_init>:

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <Keypad_getkey>:
}

char Keypad_getkey(){
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	c0 e6       	ldi	r28, 0x60	; 96
  a2:	d0 e0       	ldi	r29, 0x00	; 0
	int i,j;
	for (i = 0; i < 4; i++){
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
  a8:	de 01       	movw	r26, r28
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	92 b3       	in	r25, 0x12	; 18
  b0:	fa 01       	movw	r30, r20
  b2:	0c 90       	ld	r0, X
  b4:	02 c0       	rjmp	.+4      	; 0xba <Keypad_getkey+0x26>
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <Keypad_getkey+0x22>
  be:	9a 01       	movw	r18, r20
  c0:	12 96       	adiw	r26, 0x02	; 2
  c2:	0c 90       	ld	r0, X
  c4:	12 97       	sbiw	r26, 0x02	; 2
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Keypad_getkey+0x38>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <Keypad_getkey+0x34>
  d0:	2e 2b       	or	r18, r30
  d2:	82 2f       	mov	r24, r18
  d4:	89 2b       	or	r24, r25
  d6:	9a 01       	movw	r18, r20
  d8:	14 96       	adiw	r26, 0x04	; 4
  da:	0c 90       	ld	r0, X
  dc:	14 97       	sbiw	r26, 0x04	; 4
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Keypad_getkey+0x50>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Keypad_getkey+0x4c>
  e8:	28 2b       	or	r18, r24
  ea:	ca 01       	movw	r24, r20
  ec:	16 96       	adiw	r26, 0x06	; 6
  ee:	0c 90       	ld	r0, X
  f0:	16 97       	sbiw	r26, 0x06	; 6
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <Keypad_getkey+0x64>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <Keypad_getkey+0x60>
  fc:	82 2b       	or	r24, r18
  fe:	82 bb       	out	0x12, r24	; 18
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
 100:	92 b3       	in	r25, 0x12	; 18
 102:	88 81       	ld	r24, Y
 104:	22 96       	adiw	r28, 0x02	; 2
 106:	9a 01       	movw	r18, r20
 108:	02 c0       	rjmp	.+4      	; 0x10e <Keypad_getkey+0x7a>
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <Keypad_getkey+0x76>
 112:	82 2f       	mov	r24, r18
 114:	80 95       	com	r24
 116:	89 23       	and	r24, r25
 118:	82 bb       	out	0x12, r24	; 18
 11a:	e8 e6       	ldi	r30, 0x68	; 104
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	ee 24       	eor	r14, r14
 120:	e3 94       	inc	r14
 122:	f1 2c       	mov	r15, r1
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <Keypad_getkey+0xa0>
 12a:	0f 5f       	subi	r16, 0xFF	; 255
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	e8 1a       	sub	r14, r24
 132:	f8 0a       	sbc	r15, r24
		for(j = 0; j < 4; j++){
			if (!(keypadPIN & (1 << Key_padRow[j])))
 134:	80 b3       	in	r24, 0x10	; 16
 136:	20 81       	ld	r18, Z
 138:	32 96       	adiw	r30, 0x02	; 2
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <Keypad_getkey+0xb0>
 140:	95 95       	asr	r25
 142:	87 95       	ror	r24
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <Keypad_getkey+0xac>
 148:	80 fd       	sbrc	r24, 0
 14a:	50 c0       	rjmp	.+160    	; 0x1ec <Keypad_getkey+0x158>
 14c:	ca 01       	movw	r24, r20
 14e:	02 c0       	rjmp	.+4      	; 0x154 <Keypad_getkey+0xc0>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	2a 95       	dec	r18
 156:	e2 f7       	brpl	.-8      	; 0x150 <Keypad_getkey+0xbc>
 158:	9c 01       	movw	r18, r24
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
 15a:	80 b3       	in	r24, 0x10	; 16
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	82 23       	and	r24, r18
 160:	93 23       	and	r25, r19
 162:	89 2b       	or	r24, r25
 164:	d1 f3       	breq	.-12     	; 0x15a <Keypad_getkey+0xc6>
				switch(i){
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	71 05       	cpc	r23, r1
 16a:	c9 f0       	breq	.+50     	; 0x19e <Keypad_getkey+0x10a>
 16c:	24 f4       	brge	.+8      	; 0x176 <Keypad_getkey+0xe2>
 16e:	61 15       	cp	r22, r1
 170:	71 05       	cpc	r23, r1
 172:	41 f0       	breq	.+16     	; 0x184 <Keypad_getkey+0xf0>
 174:	3b c0       	rjmp	.+118    	; 0x1ec <Keypad_getkey+0x158>
 176:	62 30       	cpi	r22, 0x02	; 2
 178:	71 05       	cpc	r23, r1
 17a:	f1 f0       	breq	.+60     	; 0x1b8 <Keypad_getkey+0x124>
 17c:	63 30       	cpi	r22, 0x03	; 3
 17e:	71 05       	cpc	r23, r1
 180:	41 f1       	breq	.+80     	; 0x1d2 <Keypad_getkey+0x13e>
 182:	34 c0       	rjmp	.+104    	; 0x1ec <Keypad_getkey+0x158>
					case (0):
						if (j == 0) return '7';
 184:	01 15       	cp	r16, r1
 186:	11 05       	cpc	r17, r1
 188:	f1 f1       	breq	.+124    	; 0x206 <Keypad_getkey+0x172>
						else if (j == 1) return '4';
 18a:	01 30       	cpi	r16, 0x01	; 1
 18c:	11 05       	cpc	r17, r1
 18e:	e9 f1       	breq	.+122    	; 0x20a <Keypad_getkey+0x176>
						else if (j == 2) return '1';
 190:	02 30       	cpi	r16, 0x02	; 2
 192:	11 05       	cpc	r17, r1
 194:	e1 f1       	breq	.+120    	; 0x20e <Keypad_getkey+0x17a>
						else if (j == 3) return '?';
 196:	03 30       	cpi	r16, 0x03	; 3
 198:	11 05       	cpc	r17, r1
 19a:	41 f5       	brne	.+80     	; 0x1ec <Keypad_getkey+0x158>
 19c:	3a c0       	rjmp	.+116    	; 0x212 <Keypad_getkey+0x17e>
						break;
					case (1):
						if (j == 0) return '8';
 19e:	01 15       	cp	r16, r1
 1a0:	11 05       	cpc	r17, r1
 1a2:	c9 f1       	breq	.+114    	; 0x216 <Keypad_getkey+0x182>
						else if (j == 1) return '5';
 1a4:	01 30       	cpi	r16, 0x01	; 1
 1a6:	11 05       	cpc	r17, r1
 1a8:	c1 f1       	breq	.+112    	; 0x21a <Keypad_getkey+0x186>
						else if (j == 2) return '2';
 1aa:	02 30       	cpi	r16, 0x02	; 2
 1ac:	11 05       	cpc	r17, r1
 1ae:	b9 f1       	breq	.+110    	; 0x21e <Keypad_getkey+0x18a>
						else if (j == 3) return '0';
 1b0:	03 30       	cpi	r16, 0x03	; 3
 1b2:	11 05       	cpc	r17, r1
 1b4:	d9 f4       	brne	.+54     	; 0x1ec <Keypad_getkey+0x158>
 1b6:	35 c0       	rjmp	.+106    	; 0x222 <Keypad_getkey+0x18e>
						break;
					case (2):
						if (j == 0) return '9';
 1b8:	01 15       	cp	r16, r1
 1ba:	11 05       	cpc	r17, r1
 1bc:	a1 f1       	breq	.+104    	; 0x226 <Keypad_getkey+0x192>
						else if (j == 1) return '6';
 1be:	01 30       	cpi	r16, 0x01	; 1
 1c0:	11 05       	cpc	r17, r1
 1c2:	99 f1       	breq	.+102    	; 0x22a <Keypad_getkey+0x196>
						else if (j == 2) return '3';
 1c4:	02 30       	cpi	r16, 0x02	; 2
 1c6:	11 05       	cpc	r17, r1
 1c8:	91 f1       	breq	.+100    	; 0x22e <Keypad_getkey+0x19a>
						else if (j == 3) return '=';
 1ca:	03 30       	cpi	r16, 0x03	; 3
 1cc:	11 05       	cpc	r17, r1
 1ce:	71 f4       	brne	.+28     	; 0x1ec <Keypad_getkey+0x158>
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <Keypad_getkey+0x19e>
						break;
					case (3):
						if (j == 0) return '/';
 1d2:	01 15       	cp	r16, r1
 1d4:	11 05       	cpc	r17, r1
 1d6:	79 f1       	breq	.+94     	; 0x236 <Keypad_getkey+0x1a2>
						else if (j == 1) return '*';
 1d8:	01 30       	cpi	r16, 0x01	; 1
 1da:	11 05       	cpc	r17, r1
 1dc:	71 f1       	breq	.+92     	; 0x23a <Keypad_getkey+0x1a6>
						else if (j == 2) return '-';
 1de:	02 30       	cpi	r16, 0x02	; 2
 1e0:	11 05       	cpc	r17, r1
 1e2:	69 f1       	breq	.+90     	; 0x23e <Keypad_getkey+0x1aa>
						else if (j == 3) return '+';
 1e4:	03 30       	cpi	r16, 0x03	; 3
 1e6:	11 05       	cpc	r17, r1
 1e8:	71 f5       	brne	.+92     	; 0x246 <Keypad_getkey+0x1b2>
 1ea:	2b c0       	rjmp	.+86     	; 0x242 <Keypad_getkey+0x1ae>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 1ec:	94 e0       	ldi	r25, 0x04	; 4
 1ee:	e9 16       	cp	r14, r25
 1f0:	f1 04       	cpc	r15, r1
 1f2:	0c f4       	brge	.+2      	; 0x1f6 <Keypad_getkey+0x162>
 1f4:	9a cf       	rjmp	.-204    	; 0x12a <Keypad_getkey+0x96>
	KEYPAD_PORT = 0xFF;
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
 1f6:	6f 5f       	subi	r22, 0xFF	; 255
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa:	64 30       	cpi	r22, 0x04	; 4
 1fc:	71 05       	cpc	r23, r1
 1fe:	09 f0       	breq	.+2      	; 0x202 <Keypad_getkey+0x16e>
 200:	56 cf       	rjmp	.-340    	; 0xae <Keypad_getkey+0x1a>
						break;
				}
			}
		}
	}
	return 'A';
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	26 c0       	rjmp	.+76     	; 0x252 <Keypad_getkey+0x1be>
			if (!(keypadPIN & (1 << Key_padRow[j])))
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
				switch(i){
					case (0):
						if (j == 0) return '7';
 206:	87 e3       	ldi	r24, 0x37	; 55
 208:	24 c0       	rjmp	.+72     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 1) return '4';
 20a:	84 e3       	ldi	r24, 0x34	; 52
 20c:	22 c0       	rjmp	.+68     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 2) return '1';
 20e:	81 e3       	ldi	r24, 0x31	; 49
 210:	20 c0       	rjmp	.+64     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 3) return '?';
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	1e c0       	rjmp	.+60     	; 0x252 <Keypad_getkey+0x1be>
						break;
					case (1):
						if (j == 0) return '8';
 216:	88 e3       	ldi	r24, 0x38	; 56
 218:	1c c0       	rjmp	.+56     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 1) return '5';
 21a:	85 e3       	ldi	r24, 0x35	; 53
 21c:	1a c0       	rjmp	.+52     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 2) return '2';
 21e:	82 e3       	ldi	r24, 0x32	; 50
 220:	18 c0       	rjmp	.+48     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 3) return '0';
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	16 c0       	rjmp	.+44     	; 0x252 <Keypad_getkey+0x1be>
						break;
					case (2):
						if (j == 0) return '9';
 226:	89 e3       	ldi	r24, 0x39	; 57
 228:	14 c0       	rjmp	.+40     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 1) return '6';
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	12 c0       	rjmp	.+36     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 2) return '3';
 22e:	83 e3       	ldi	r24, 0x33	; 51
 230:	10 c0       	rjmp	.+32     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 3) return '=';
 232:	8d e3       	ldi	r24, 0x3D	; 61
 234:	0e c0       	rjmp	.+28     	; 0x252 <Keypad_getkey+0x1be>
						break;
					case (3):
						if (j == 0) return '/';
 236:	8f e2       	ldi	r24, 0x2F	; 47
 238:	0c c0       	rjmp	.+24     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 1) return '*';
 23a:	8a e2       	ldi	r24, 0x2A	; 42
 23c:	0a c0       	rjmp	.+20     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 2) return '-';
 23e:	8d e2       	ldi	r24, 0x2D	; 45
 240:	08 c0       	rjmp	.+16     	; 0x252 <Keypad_getkey+0x1be>
						else if (j == 3) return '+';
 242:	8b e2       	ldi	r24, 0x2B	; 43
 244:	06 c0       	rjmp	.+12     	; 0x252 <Keypad_getkey+0x1be>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	e8 16       	cp	r14, r24
 24a:	f1 04       	cpc	r15, r1
 24c:	0c f4       	brge	.+2      	; 0x250 <Keypad_getkey+0x1bc>
 24e:	6d cf       	rjmp	.-294    	; 0x12a <Keypad_getkey+0x96>
						break;
				}
			}
		}
	}
	return 'A';
 250:	81 e4       	ldi	r24, 0x41	; 65
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	08 95       	ret

00000260 <LCD_lcd_kick>:
	}
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 260:	c3 9a       	sbi	0x18, 3	; 24
 262:	83 ed       	ldi	r24, 0xD3	; 211
 264:	90 e3       	ldi	r25, 0x30	; 48
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_lcd_kick+0x6>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_lcd_kick+0xc>
 26c:	00 00       	nop
 26e:	c3 98       	cbi	0x18, 3	; 24
 270:	08 95       	ret

00000272 <LCD_check_lcd_isbusy>:
 272:	8a b3       	in	r24, 0x1a	; 26
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	8a bb       	out	0x1a, r24	; 26
 278:	c2 9a       	sbi	0x18, 2	; 24
 27a:	c1 98       	cbi	0x18, 1	; 24
 27c:	0e 94 30 01 	call	0x260	; 0x260 <LCD_lcd_kick>
 280:	8a b3       	in	r24, 0x1a	; 26
 282:	80 6f       	ori	r24, 0xF0	; 240
 284:	8a bb       	out	0x1a, r24	; 26
 286:	c2 98       	cbi	0x18, 2	; 24
 288:	08 95       	ret

0000028a <LCD_WRITE_COMMAND>:
 28a:	cf 93       	push	r28
 28c:	c8 2f       	mov	r28, r24
 28e:	0e 94 39 01 	call	0x272	; 0x272 <LCD_check_lcd_isbusy>
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	8f 70       	andi	r24, 0x0F	; 15
 296:	9c 2f       	mov	r25, r28
 298:	90 7f       	andi	r25, 0xF0	; 240
 29a:	89 2b       	or	r24, r25
 29c:	8b bb       	out	0x1b, r24	; 27
 29e:	88 b3       	in	r24, 0x18	; 24
 2a0:	89 7f       	andi	r24, 0xF9	; 249
 2a2:	88 bb       	out	0x18, r24	; 24
 2a4:	0e 94 30 01 	call	0x260	; 0x260 <LCD_lcd_kick>
 2a8:	8b b3       	in	r24, 0x1b	; 27
 2aa:	28 2f       	mov	r18, r24
 2ac:	2f 70       	andi	r18, 0x0F	; 15
 2ae:	30 e1       	ldi	r19, 0x10	; 16
 2b0:	c3 9f       	mul	r28, r19
 2b2:	c0 01       	movw	r24, r0
 2b4:	11 24       	eor	r1, r1
 2b6:	82 2b       	or	r24, r18
 2b8:	8b bb       	out	0x1b, r24	; 27
 2ba:	88 b3       	in	r24, 0x18	; 24
 2bc:	89 7f       	andi	r24, 0xF9	; 249
 2be:	88 bb       	out	0x18, r24	; 24
 2c0:	0e 94 30 01 	call	0x260	; 0x260 <LCD_lcd_kick>
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <LCD_clear_screen>:
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_WRITE_COMMAND>
 2ce:	08 95       	ret

000002d0 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	87 e8       	ldi	r24, 0x87	; 135
 2d2:	93 e1       	ldi	r25, 0x13	; 19
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_INIT+0x4>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_INIT+0xa>
 2da:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2dc:	87 b3       	in	r24, 0x17	; 23
 2de:	8e 60       	ori	r24, 0x0E	; 14
 2e0:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2e2:	88 b3       	in	r24, 0x18	; 24
 2e4:	81 7f       	andi	r24, 0xF1	; 241
 2e6:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	8a bb       	out	0x1a, r24	; 26
 2ec:	85 ea       	ldi	r24, 0xA5	; 165
 2ee:	9e e0       	ldi	r25, 0x0E	; 14
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_INIT+0x20>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_INIT+0x26>
 2f6:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 2f8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_clear_screen>
		//LCD_WRITE_COMMAND(0x02);		/* send for 4 bit initialization of LCD  */
		//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
		//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 302:	88 e2       	ldi	r24, 0x28	; 40
 304:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 30e:	80 e8       	ldi	r24, 0x80	; 128
 310:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 314:	8f e0       	ldi	r24, 0x0F	; 15
 316:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_WRITE_COMMAND>
 31a:	08 95       	ret

0000031c <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 31c:	cf 93       	push	r28
 31e:	c8 2f       	mov	r28, r24
		_delay_ms(1);
		LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
		//LCD_check_lcd_isbusy();
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 320:	8b b3       	in	r24, 0x1b	; 27
 322:	8f 70       	andi	r24, 0x0F	; 15
 324:	9c 2f       	mov	r25, r28
 326:	90 7f       	andi	r25, 0xF0	; 240
 328:	89 2b       	or	r24, r25
 32a:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 32c:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 32e:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick();
 330:	0e 94 30 01 	call	0x260	; 0x260 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 334:	8b b3       	in	r24, 0x1b	; 27
 336:	28 2f       	mov	r18, r24
 338:	2f 70       	andi	r18, 0x0F	; 15
 33a:	30 e1       	ldi	r19, 0x10	; 16
 33c:	c3 9f       	mul	r28, r19
 33e:	c0 01       	movw	r24, r0
 340:	11 24       	eor	r1, r1
 342:	82 2b       	or	r24, r18
 344:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 346:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 348:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick ();
 34a:	0e 94 30 01 	call	0x260	; 0x260 <LCD_lcd_kick>
	#endif
}
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <main>:


int main()
{
	
	LCD_INIT();
 352:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_INIT>
	Keypad_init();
 356:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_init>
 35a:	83 ed       	ldi	r24, 0xD3	; 211
 35c:	90 e3       	ldi	r25, 0x30	; 48
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0xc>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x12>
 364:	00 00       	nop
	_delay_ms(50);
	unsigned char key_pressed;
	while(1){
		key_pressed = Keypad_getkey();
 366:	0e 94 4a 00 	call	0x94	; 0x94 <Keypad_getkey>
		switch(key_pressed){
 36a:	8f 33       	cpi	r24, 0x3F	; 63
 36c:	19 f0       	breq	.+6      	; 0x374 <main+0x22>
 36e:	81 34       	cpi	r24, 0x41	; 65
 370:	d1 f3       	breq	.-12     	; 0x366 <main+0x14>
 372:	03 c0       	rjmp	.+6      	; 0x37a <main+0x28>
			case 'A':
				break;
			case '?':
				LCD_clear_screen();
 374:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_clear_screen>
				break;
 378:	f6 cf       	rjmp	.-20     	; 0x366 <main+0x14>
			default:
				LCD_WRITE_CHAR(key_pressed);
 37a:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_WRITE_CHAR>
				break;
 37e:	f3 cf       	rjmp	.-26     	; 0x366 <main+0x14>

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
